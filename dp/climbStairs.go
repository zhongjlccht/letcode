package dp

//假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
//
//每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
//
//注意：给定 n 是一个正整数。
//
//示例 1：
//
//输入： 2
//输出： 2
//解释： 有两种方法可以爬到楼顶。
//1 阶 + 1 阶
//2 阶
//示例 2：
//
//输入： 3
//输出： 3
//解释： 有三种方法可以爬到楼顶。
//1 阶 + 1 阶 + 1 阶
//1 阶 + 2 阶
//2 阶 + 1 阶

// 爬楼梯
func climbStairs(n int) int {
	if n == 1 {
		return 1
	}
	dp := make([]int, n+1)
	dp[1] = 1
	dp[2] = 2
	for i := 3; i <= n; i++ {
		dp[i] = dp[i-1] + dp[i-2]
	}
	return dp[n]
}

// 爬楼梯进阶版本
//假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
//
//每次你可以爬至多m (1 <= m < n)个台阶。你有多少种不同的方法可以爬到楼顶呢？
//
//注意：给定 n 是一个正整数。
//
//输入描述：输入共一行，包含两个正整数，分别表示n, m
//
//输出描述：输出一个整数，表示爬到楼顶的方法数。
//
//输入示例：3 2
//
//输出示例：3
//
//提示：
//
//当 m = 2，n = 3 时，n = 3 这表示一共有三个台阶，m = 2 代表你每次可以爬一个台阶或者两个台阶。
//
//此时你有三种方法可以爬到楼顶。
//
//1 阶 + 1 阶 + 1 阶段
//1 阶 + 2 阶
//2 阶 + 1 阶

// 可以用背包法来解这道题, m是每次多少台阶，n是总共多少台阶
func climbStairsV2(m, n int) int {
	dp := make([]int, n+1)
	dp[0] = 1
	for j := 0; j <= n; j++ {
		for i := 1; i <= m; i++ {
			if j >= i {
				dp[j] += dp[j-i]
			}
		}
	}
	return dp[n]
}
