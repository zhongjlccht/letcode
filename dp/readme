解动态规划5步曲：
确定dp数组（dp table）以及下标的含义
确定递推公式
dp数组如何初始化
确定遍历顺序
举例推导dp数组

常见的推导公式有：

dp[j] = max(dp[j], dp[j-weight[i]]+value[i]) # 背包，求最大价值，重量和价值不一样
dp[j] = min(dp[j], dp[j-coins[i]]+1)  #凑整数/零钱兑换，这里要求最小元素个数，而不是求价值/重量,
                                      #这里的区别就是coins[i]是零钱，还是其它，比如dp[j] = min(dp[j], dp[j-i*i]+1)这里的i*i是完全平方数
dp[j] = dp[j-num] + num    # 凑整数/零钱兑换，相当于重量和价值都是元素自己， 顺序有关系则排列(先背包后物品），没有关系则组合（先物品后背包则内层逆序）
dp[j] += dp[j-nums[i]]  # 完全背包问题，物品可以多次放入背包，所以这里是累加可能的种类
dp[i][j] = dp[i-1][j] + dp[i][j-1] # uniquePath 找多少种路径
dp[i] += dp[j-1] * dp[i-j] # 从1到n个数组成二叉树的种类，1<=j<=i
f[i] = min(f[i-1]+cost[i-1], f[i-2]+cost[i-2])  #最小代价爬楼梯，求爬法总数
dp[i] = max(dp[i], max(j*(i-j), j*dp[i-j])) #整数拆分最少2个数，可以拆成多个，求最大乘积； j*(i-j)代表拆成2个数，j*dp[i-j])代表拆成多个数